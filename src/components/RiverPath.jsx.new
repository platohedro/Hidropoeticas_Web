import { useEffect, useState } from 'react';

const RiverPath = () => {
  const [activeSection, setActiveSection] = useState("introduccion");
  const [existingSections, setExistingSections] = useState([]);

  // Coordenadas predefinidas para cada sección en el mapa
  const sectionCoordinates = {
    "introduccion": { x: 450, y: 200 },     // Norte central de Colombia
    "origen": { x: 320, y: 350 },           // Centro-oeste de Colombia
    "desafios": { x: 550, y: 400 },         // Centro-este de Colombia
    "cultura": { x: 400, y: 500 },          // Sur de Colombia
    "historia": { x: 480, y: 300 },         // Centro de Colombia
    "transformacion": { x: 600, y: 350 },    // Este de Colombia
    "renacimiento": { x: 350, y: 450 }      // Suroeste de Colombia
  };

  // Textos de navegación
  const navItems = [
    { id: "introduccion", text: "INTRODUCCIÓN" },
    { id: "origen", text: "ORIGEN NATURAL" },
    { id: "desafios", text: "DESAFÍOS Y RESILIENCIA" },
    { id: "cultura", text: "CONEXIÓN CULTURAL" },
    { id: "historia", text: "HISTORIA Y MEMORIA" },
    { id: "transformacion", text: "TRANSFORMACIÓN URBANA" },
    { id: "renacimiento", text: "RENACIMIENTO Y FUTURO" }
  ];

  // Detectar las secciones existentes en la página
  useEffect(() => {
    const detectSections = () => {
      const allPossibleSections = Object.keys(sectionCoordinates);
      const existing = allPossibleSections.filter(sectionId => {
        return document.getElementById(sectionId) !== null;
      });
      setExistingSections(existing);
    };

    // Ejecutar después de que se monte el componente
    const timer = setTimeout(detectSections, 100);
    return () => clearTimeout(timer);
  }, []);

  // Actualizar sección activa basada en el scroll
  useEffect(() => {
    const handleScroll = () => {
      const sections = existingSections;
      if (sections.length === 0) return;
      
      let currentSection = sections[0];
      let minDistance = Infinity;
      
      sections.forEach(section => {
        const element = document.getElementById(section);
        if (element) {
          const rect = element.getBoundingClientRect();
          const distance = Math.abs(rect.top + rect.height / 2);
          
          if (distance < minDistance) {
            minDistance = distance;
            currentSection = section;
          }
        }
      });
      
      setActiveSection(currentSection);
    };

    window.addEventListener("scroll", handleScroll, { passive: true });
    handleScroll();
    
    return () => window.removeEventListener("scroll", handleScroll);
  }, [existingSections]);

  // Función para desplazarse a la sección
  const scrollToSection = (sectionId) => {
    const element = document.getElementById(sectionId);
    if (element) {
      const header = document.querySelector("header");
      const headerHeight = header ? header.offsetHeight : 0;
      const elementPosition = element.getBoundingClientRect().top + window.pageYOffset;
      const offsetPosition = elementPosition - headerHeight;

      window.scrollTo({
        top: offsetPosition,
        behavior: "smooth"
      });
    }
  };

  return (
    <div className="river-container fixed inset-0 z-20 pointer-events-none">
      <div className="relative w-full h-full">
        {existingSections.map((sectionId) => {
          const isActive = activeSection === sectionId;
          const navItem = navItems.find(item => item.id === sectionId);
          const coordinates = sectionCoordinates[sectionId];
          
          if (!coordinates) return null;
          
          return (
            <div 
              key={sectionId}
              className="absolute flex items-center justify-center"
              style={{
                left: `${coordinates.x}px`,
                top: `${coordinates.y}px`,
                transform: "translate(-50%, -50%)"
              }}
              onClick={() => scrollToSection(sectionId)}
            >
              <div 
                className={`w-4 h-4 rounded-full border pointer-events-auto relative
                  ${isActive ? "bg-cyan-400" : "bg-cyan-600"}`}
                style={{
                  borderColor: isActive ? "#4fe9ab" : "#06b6d4",
                  boxShadow: isActive ? "0 0 10px rgba(79, 233, 171, 0.5)" : "none"
                }}
              >
                <span
                  className={`absolute left-1/2 -bottom-8 transform -translate-x-1/2 text-cyan-100 text-xs font-medium tracking-wider whitespace-nowrap px-2 py-0.5 rounded-full
                    ${isActive ? "opacity-100" : "opacity-0"}`}
                  style={{
                    backgroundColor: "rgba(6, 182, 212, 0.3)",
                    textShadow: "0 2px 4px rgba(0, 0, 0, 0.3)"
                  }}
                >
                  {navItem?.text}
                </span>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};

export default RiverPath;
